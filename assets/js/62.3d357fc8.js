(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{260:function(t,e,n){"use strict";n.r(e);var a=n(0),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"git-log-命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-log-命令"}},[t._v("#")]),t._v(" git log 命令")]),t._v(" "),n("h4",{attrs:{id:"git-log-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-log-n"}},[t._v("#")]),t._v(" git log -n")]),t._v(" "),n("p",[t._v("显示前N条日志")]),t._v(" "),n("h4",{attrs:{id:"git-log-stat-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-log-stat-n"}},[t._v("#")]),t._v(" git log --stat -n")]),t._v(" "),n("p",[t._v("显示简要的增改行数统计,每次提交文件的变更统计")]),t._v(" "),n("h4",{attrs:{id:"git-log-pretty-format"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-log-pretty-format"}},[t._v("#")]),t._v(' git log --pretty=format:" "')]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("选项")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("%H")]),t._v(" "),n("td",[t._v("提交对象（commit）的完整哈希字串")])]),t._v(" "),n("tr",[n("td",[t._v("%h")]),t._v(" "),n("td",[t._v("提交对象的简短哈希字串")])]),t._v(" "),n("tr",[n("td",[t._v("%T")]),t._v(" "),n("td",[t._v("树对象（tree）的完整哈希字串")])]),t._v(" "),n("tr",[n("td",[t._v("%t")]),t._v(" "),n("td",[t._v("树对象的简短哈希字串")])]),t._v(" "),n("tr",[n("td",[t._v("%P")]),t._v(" "),n("td",[t._v("父对象（parent）的完整哈希字串")])]),t._v(" "),n("tr",[n("td",[t._v("%p")]),t._v(" "),n("td",[t._v("父对象的简短哈希字串")])]),t._v(" "),n("tr",[n("td",[t._v("%an")]),t._v(" "),n("td",[t._v("作者（author）的名字")])]),t._v(" "),n("tr",[n("td",[t._v("%ae")]),t._v(" "),n("td",[t._v("作者的电子邮件地址")])]),t._v(" "),n("tr",[n("td",[t._v("%ad")]),t._v(" "),n("td",[t._v("作者修订日期（可以用 -date= 选项定制格式）")])]),t._v(" "),n("tr",[n("td",[t._v("%ar")]),t._v(" "),n("td",[t._v("作者修订日期，按多久以前的方式显示")])]),t._v(" "),n("tr",[n("td",[t._v("%cn")]),t._v(" "),n("td",[t._v("提交者(committer)的名字")])]),t._v(" "),n("tr",[n("td",[t._v("%ce")]),t._v(" "),n("td",[t._v("提交者的电子邮件地址")])]),t._v(" "),n("tr",[n("td",[t._v("%cd")]),t._v(" "),n("td",[t._v("提交日期")])]),t._v(" "),n("tr",[n("td",[t._v("%cr")]),t._v(" "),n("td",[t._v("提交日期，按多久以前的方式显示")])]),t._v(" "),n("tr",[n("td",[t._v("%s")]),t._v(" "),n("td",[t._v("提交说明")])])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('git log --pretty=format:" %s" -3\ntest:add new question add question6\ntest:add new question add question5\ntest:add new question\n//命令好用，起个别名\ngit config alias.logs "log --pretty=format:\'%s\'"\n// 以后就可以使用如下命令，命令结果和上面一条命令结果一样\ngit logs -3\n// 某些文件或某个文件的最近3次记录\ngit logs -3  static/*.html\n// 指定作者为"BeginMan"的所有提交\ngit log --author=BeginMan\n// 指定关键字为“init”的所有提交\ngit log --grep=init\n// 指定提交者为"Jack"的所有提交\ngit log --committer=Jack\n\n//查看文件的修改记录 可以看到提交版本\ngit log demo/js/propagation.js\ncommit bdbcf6226b05207fc4d4a6b56ab566ff0744295e\n//回退到指定版本\ngit reset bdbcf6226b05207fc4d4a6b56ab566ff0744295e demo/js/propagation.js\n')])])]),n("h2",{attrs:{id:"git-commit-message"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-message"}},[t._v("#")]),t._v(" git Commit message")]),t._v(" "),n("p",[t._v("Commit message 都包括三个部分：Header，Body 和 Footer。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n")])])]),n("p",[t._v("Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("type")]),t._v(" "),n("th",[t._v("意义")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("feat")]),t._v(" "),n("td",[t._v("新功能（feature）")])]),t._v(" "),n("tr",[n("td",[t._v("fix")]),t._v(" "),n("td",[t._v("修补bug")])]),t._v(" "),n("tr",[n("td",[t._v("docs")]),t._v(" "),n("td",[t._v("文档（documentation）")])]),t._v(" "),n("tr",[n("td",[t._v("style")]),t._v(" "),n("td",[t._v("格式（不影响代码运行的变动）")])]),t._v(" "),n("tr",[n("td",[t._v("refactor")]),t._v(" "),n("td",[t._v("重构（即不是新增功能，也不是修改bug的代码变动）")])]),t._v(" "),n("tr",[n("td",[t._v("test")]),t._v(" "),n("td",[t._v("增加测试")])]),t._v(" "),n("tr",[n("td",[t._v("chore")]),t._v(" "),n("td",[t._v("构建过程或辅助工具的变动")])])])]),t._v(" "),n("p",[t._v("scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。")]),t._v(" "),n("p",[t._v("subject是 commit 目的的简短描述，不超过50个字符。")]),t._v(" "),n("blockquote",[n("p",[t._v("以动词开头，使用第一人称现在时，比如change，而不是changed或changes"),n("br"),t._v("\n第一个字母小写"),n("br"),t._v("\n结尾不加句号（.）")])]),t._v(" "),n("p",[t._v("总结："),n("code",[t._v('commit message应包含type+":"+subject')])]),t._v(" "),n("h2",{attrs:{id:"git-issues"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-issues"}},[t._v("#")]),t._v(" git issues")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 关闭一个\nCloses #234\n// 关闭多个issue\nCloses #123, #245, #992\n")])])]),n("h2",{attrs:{id:"git-branch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),n("div",{staticClass:"language-cmd extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('查看所有分支(前面带*号的代表你当前工作目录所处的分支)\ngit branch -a  \n\n\n创建test分支\ngit branch test  \n\n切换到test分支\ngit checkout test  \n\n删除本地test分支\ngit branch -d test\n\n删除远程test分支\ngit push origin --delete test\n\n合并分支(把test分支合并到master分支上)\ngit checkout master\ngit merge test\n\n把当前test分支提交到远程test分支\ngit push origin test\n\n把本地所有分支提交到远程相对应的分支上\ngit push\n\n\n//复制代码库到本地\ngit clone http://192.168.1.231/group-two/jujusports-web.git\n\n//添加所有未添加的文件\ngit add .\n\n\n//查看版本区别只显示文件名字\ngit diff --name-only\n\n//git 查看某版本文件\n//git show 版本号 文件名\ngit show 33e636914bf61536fe56d3872338f0087c1a1e5c static/order_undone.html\n\n//刚创建git需要添加分支\ngit push -u origin master\n\n//git撤销用branch上代码覆盖本地仓库及本地工程\ngit checkout routes/index.js\n\ngit reset [--hard|soft|mixed|merge|keep]\n/*\n[<commit>或HEAD]：将当前的分支重设（reset）到指定的<commit>或者HEAD（默认，如果不显示指定commit，默认是HEAD，即最新的一次提交），并且根据[mode]有可能更新index和working directory。mode的取值可以是hard、soft、mixed、merged、keep。下面来详细说明每种模式的意义和效果。\nA). --hard：重设（reset） index和working directory，自从<commit>以来在working directory中的任何改变都被丢弃，并把HEAD指向<commit>。\nB). --soft：index和working directory中的内容不作任何改变，仅仅把HEAD指向<commit>。这个模式的效果是，执行完毕后，自从<commit>以来的所有改变都会显示在git status的"Changes to be committed"中。\nC).  --mixed：仅reset index，但是不reset working directory。这个模式是默认模式，即当不显示告知git reset模式时，会使用mixed模式。这个模式的效果是，working directory中文件的修改都会被保留，不会丢弃，但是也不会被标记成"Changes to be committed"，但是会打出什么还未被更新的报告。报告如下：\n引用\nUnstaged changes after reset:\nM Test.Scala\nM test.txt\n*/\n\n')])])]),n("h2",{attrs:{id:"git-config"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[t._v("#")]),t._v(" git config")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("git config --global user.name  openks\ngit config --global user.email  zhuyangxing@foxmail.com\n//显示所有配置\ngit config --list\n//保存git的用户名密码\ngit config --global credential.helper store\n\n")])])]),n("p",[n("a",{attrs:{href:"http://note.youdao.com/yws/public/redirect/share?id=5f785b0976e591a76c962e0624feec5a&type=false",target:"_blank",rel:"noopener noreferrer"}},[t._v("有道分享"),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);