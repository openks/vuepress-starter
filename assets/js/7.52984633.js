(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git-log-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log-命令"}},[t._v("#")]),t._v(" git log 命令")]),t._v(" "),s("h4",{attrs:{id:"git-log-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log-n"}},[t._v("#")]),t._v(" git log -n")]),t._v(" "),s("p",[t._v("显示前N条日志")]),t._v(" "),s("h4",{attrs:{id:"git-log-stat-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log-stat-n"}},[t._v("#")]),t._v(" git log --stat -n")]),t._v(" "),s("p",[t._v("显示简要的增改行数统计,每次提交文件的变更统计")]),t._v(" "),s("h4",{attrs:{id:"git-log-pretty-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log-pretty-format"}},[t._v("#")]),t._v(' git log --pretty=format:" "')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("选项")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("%H")]),t._v(" "),s("td",[t._v("提交对象（commit）的完整哈希字串")])]),t._v(" "),s("tr",[s("td",[t._v("%h")]),t._v(" "),s("td",[t._v("提交对象的简短哈希字串")])]),t._v(" "),s("tr",[s("td",[t._v("%T")]),t._v(" "),s("td",[t._v("树对象（tree）的完整哈希字串")])]),t._v(" "),s("tr",[s("td",[t._v("%t")]),t._v(" "),s("td",[t._v("树对象的简短哈希字串")])]),t._v(" "),s("tr",[s("td",[t._v("%P")]),t._v(" "),s("td",[t._v("父对象（parent）的完整哈希字串")])]),t._v(" "),s("tr",[s("td",[t._v("%p")]),t._v(" "),s("td",[t._v("父对象的简短哈希字串")])]),t._v(" "),s("tr",[s("td",[t._v("%an")]),t._v(" "),s("td",[t._v("作者（author）的名字")])]),t._v(" "),s("tr",[s("td",[t._v("%ae")]),t._v(" "),s("td",[t._v("作者的电子邮件地址")])]),t._v(" "),s("tr",[s("td",[t._v("%ad")]),t._v(" "),s("td",[t._v("作者修订日期（可以用 -date= 选项定制格式）")])]),t._v(" "),s("tr",[s("td",[t._v("%ar")]),t._v(" "),s("td",[t._v("作者修订日期，按多久以前的方式显示")])]),t._v(" "),s("tr",[s("td",[t._v("%cn")]),t._v(" "),s("td",[t._v("提交者(committer)的名字")])]),t._v(" "),s("tr",[s("td",[t._v("%ce")]),t._v(" "),s("td",[t._v("提交者的电子邮件地址")])]),t._v(" "),s("tr",[s("td",[t._v("%cd")]),t._v(" "),s("td",[t._v("提交日期")])]),t._v(" "),s("tr",[s("td",[t._v("%cr")]),t._v(" "),s("td",[t._v("提交日期，按多久以前的方式显示")])]),t._v(" "),s("tr",[s("td",[t._v("%s")]),t._v(" "),s("td",[t._v("提交说明")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git log --pretty=format:" %s" -3\ntest:add new question add question6\ntest:add new question add question5\ntest:add new question\n//命令好用，起个别名\ngit config alias.logs "log --pretty=format:\'%s\'"\n// 以后就可以使用如下命令，命令结果和上面一条命令结果一样\ngit logs -3\n// 某些文件或某个文件的最近3次记录\ngit logs -3  static/*.html\n// 指定作者为"BeginMan"的所有提交\ngit log --author=BeginMan\n// 指定关键字为“init”的所有提交\ngit log --grep=init\n// 指定提交者为"Jack"的所有提交\ngit log --committer=Jack\n\n//查看文件的修改记录 可以看到提交版本\ngit log demo/js/propagation.js\ncommit bdbcf6226b05207fc4d4a6b56ab566ff0744295e\n//回退到指定版本\ngit reset bdbcf6226b05207fc4d4a6b56ab566ff0744295e demo/js/propagation.js\n')])])]),s("h2",{attrs:{id:"git-commit-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-message"}},[t._v("#")]),t._v(" git Commit message")]),t._v(" "),s("p",[t._v("Commit message 都包括三个部分：Header，Body 和 Footer。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n")])])]),s("p",[t._v("Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("type")]),t._v(" "),s("th",[t._v("意义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("feat")]),t._v(" "),s("td",[t._v("新功能（feature）")])]),t._v(" "),s("tr",[s("td",[t._v("fix")]),t._v(" "),s("td",[t._v("修补bug")])]),t._v(" "),s("tr",[s("td",[t._v("docs")]),t._v(" "),s("td",[t._v("文档（documentation）")])]),t._v(" "),s("tr",[s("td",[t._v("style")]),t._v(" "),s("td",[t._v("格式（不影响代码运行的变动）")])]),t._v(" "),s("tr",[s("td",[t._v("refactor")]),t._v(" "),s("td",[t._v("重构（即不是新增功能，也不是修改bug的代码变动）")])]),t._v(" "),s("tr",[s("td",[t._v("test")]),t._v(" "),s("td",[t._v("增加测试")])]),t._v(" "),s("tr",[s("td",[t._v("chore")]),t._v(" "),s("td",[t._v("构建过程或辅助工具的变动")])])])]),t._v(" "),s("p",[t._v("scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。")]),t._v(" "),s("p",[t._v("subject是 commit 目的的简短描述，不超过50个字符。")]),t._v(" "),s("blockquote",[s("p",[t._v("以动词开头，使用第一人称现在时，比如change，而不是changed或changes"),s("br"),t._v("\n第一个字母小写"),s("br"),t._v("\n结尾不加句号（.）")])]),t._v(" "),s("p",[t._v("总结："),s("code",[t._v('commit message应包含type+":"+subject')])]),t._v(" "),s("h2",{attrs:{id:"git-issues"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-issues"}},[t._v("#")]),t._v(" git issues")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 关闭一个\nCloses #234\n// 关闭多个issue\nCloses #123, #245, #992\n")])])]),s("h2",{attrs:{id:"git-branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),s("div",{staticClass:"language-cmd extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('查看所有分支(前面带*号的代表你当前工作目录所处的分支)\ngit branch -a  \n\n创建test分支\ngit branch test  \n\n切换到test分支\ngit checkout test  \n\n删除本地test分支\ngit branch -d test\n\n删除远程test分支\ngit push origin --delete test\n\n合并分支(把test分支合并到master分支上)\ngit checkout master\ngit merge test\n\n把当前test分支提交到远程test分支\ngit push origin test\n\n把本地所有分支提交到远程相对应的分支上\ngit push\n\n\n//复制代码库到本地\ngit clone http://192.168.1.231/group-two/jujusports-web.git\n\n//添加所有未添加的文件\ngit add .\n\n\n//查看版本区别只显示文件名字\ngit diff --name-only\n\n//git 查看某版本文件\n//git show 版本号 文件名\ngit show 33e636914bf61536fe56d3872338f0087c1a1e5c static/order_undone.html\n\n//刚创建git需要添加分支\ngit push -u origin master\n\n//git撤销用branch上代码覆盖本地仓库及本地工程\ngit checkout routes/index.js\n\ngit reset [--hard|soft|mixed|merge|keep]\n/*\n[<commit>或HEAD]：将当前的分支重设（reset）到指定的<commit>或者HEAD（默认，如果不显示指定commit，默认是HEAD，即最新的一次提交），并且根据[mode]有可能更新index和working directory。mode的取值可以是hard、soft、mixed、merged、keep。下面来详细说明每种模式的意义和效果。\nA). --hard：重设（reset） index和working directory，自从<commit>以来在working directory中的任何改变都被丢弃，并把HEAD指向<commit>。\nB). --soft：index和working directory中的内容不作任何改变，仅仅把HEAD指向<commit>。这个模式的效果是，执行完毕后，自从<commit>以来的所有改变都会显示在git status的"Changes to be committed"中。\nC).  --mixed：仅reset index，但是不reset working directory。这个模式是默认模式，即当不显示告知git reset模式时，会使用mixed模式。这个模式的效果是，working directory中文件的修改都会被保留，不会丢弃，但是也不会被标记成"Changes to be committed"，但是会打出什么还未被更新的报告。报告如下：\n引用\nUnstaged changes after reset:\nM Test.Scala\nM test.txt\n*/\n\n')])])]),s("h2",{attrs:{id:"git-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[t._v("#")]),t._v(" git config")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config --global user.name  openks\ngit config --global user.email  zhuyangxing@foxmail.com\n//显示所有配置\ngit config --list\n//保存git的用户名密码\ngit config --global credential.helper store\n\n")])])]),s("p",[t._v("git提交流程"),s("br"),t._v("\n为了保持提交记录的干净")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// 从服务器拉代码\ngit pull\n// 本地修改1\ngit commit -am "c1"\n// 本地修改2\ngit commit -am "c2"\n// 本地修改3\ngit commit -am "c3"\n// 1,2,3修改为一个功能先合并提交 \n// 即本地rebase\ngit rebase -i \ngit rebase -i SHA1\ngit rebase -i HEAD~5\n// 弹出编辑框 点击insert进入编辑模式 保留第一个pick 其他的pick改为s  然后esc :wq\n// 然后从远程服务器拉代码\ngit pull\n//  如果不冲突则最好 直接push到服务器\ngit push\n// 如果冲突则merage合并冲突\ngit add .\ngit commit -am "合并"\n// 再次rebase 重新合并代码\ngit rebase \n// 然后再push到服务器 \ngit push  \n')])])]),s("h3",{attrs:{id:"git仓库备份"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git仓库备份"}},[t._v("#")]),t._v(" git仓库备份")]),t._v(" "),s("p",[t._v("需求很简单"),s("br"),t._v("\n在"),s("code",[t._v("oschina")]),t._v("上做主要的代码，在"),s("code",[t._v("coding")]),t._v("做代码备份")]),t._v(" "),s("ol",[s("li",[t._v("首先在"),s("code",[t._v("oschina")]),t._v("和"),s("code",[t._v("coding")]),t._v("上分别创建项目"),s("code",[t._v("test_git_mirroe")])]),t._v(" "),s("li",[t._v("从"),s("code",[t._v("oschina")]),t._v("上"),s("code",[t._v("clone")]),t._v("代码"),s("code",[t._v("git clone https://git.oschina.net/openks/test_git_mirroe.git")])]),t._v(" "),s("li",[t._v("跳转到项目目录"),s("code",[t._v("cd test_git_mirroe")])]),t._v(" "),s("li",[t._v("添加coding的远程仓库"),s("code",[t._v("git remote add coding https://git.coding.net/zhuyangxing/test_git_mirroe.git")])]),t._v(" "),s("li",[t._v("提交"),s("code",[t._v("coding")]),t._v("做镜像代码"),s("code",[t._v("git push --mirror coding")])]),t._v(" "),s("li",[t._v("以后在"),s("code",[t._v("test_git_mirroe")]),t._v("上提交的代码都提交到"),s("code",[t._v("oschina")]),t._v("上")]),t._v(" "),s("li",[t._v("想要在"),s("code",[t._v("coding")]),t._v("上同步就执行"),s("code",[t._v("git push --mirror coding")]),t._v("即可")])]),t._v(" "),s("h3",{attrs:{id:"git一次提交到两个仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git一次提交到两个仓库"}},[t._v("#")]),t._v(" git一次提交到两个仓库")]),t._v(" "),s("p",[t._v("修改"),s("code",[t._v(".git")]),t._v("文件夹下的"),s("code",[t._v("config")]),t._v("文件"),s("br"),t._v("\n在"),s("code",[t._v("fetch")]),t._v("下添加想要提交的其他"),s("code",[t._v("git")]),t._v("路径即可")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('[remote "origin"]\n\turl = https://git.oschina.net/openks/test_git_mirroe.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n\turl = new git url\n')])])]),s("h2",{attrs:{id:"git-文件对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-文件对比"}},[t._v("#")]),t._v(" git 文件对比")]),t._v(" "),s("p",[t._v("方法一：还是我最常用的命令行")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git diff <commitA> <commitB> filename\n")])])]),s("p",[t._v("方法二：在gitlab上对比查看")]),t._v(" "),s("p",[t._v("输入两个提交版本，会显示所有文件的版本差异相同的则不显示,具体如下图\n"),s("img",{attrs:{src:"http://7xl9u9.com1.z0.glb.clouddn.com/WX20170602-140742@2x.png",alt:"image"}})]),t._v(" "),s("p",[t._v("再上一张我没找到问题的文件对比图，这确实是什么都没改啊（加了class这个除外）\n"),s("img",{attrs:{src:"http://7xl9u9.com1.z0.glb.clouddn.com/WX20170602-141302@2x.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"git-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" git Tag")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建tag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag tagName -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这里是tag相关信息"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建安全tag 别人无法修改并覆盖该tag确保该tag是认证安全版本 建议使用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -s tagName -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这里是tag相关信息"')]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果上面方法报错则使用下面方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -u 这里是gpg用户名 tagName -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这里是tag相关信息"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看tag ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -l 显示tag名 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -n 显示message")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -l -n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除Tag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d tagName\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除远程tag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete tag tagName\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将本地所有标签一次性提交到git服务器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin –-tags \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看项目的tag验证信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -v v1.0\n")])])]),s("p",[t._v("关于GPG")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成GPG Key 根据提示选择加密方法 并输入相关信息即可")]),t._v("\ngpg --gen-key\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 验证GPG Key是否生成成功")]),t._v("\ngpg --list-keys\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上边显示的是公钥，顺便也看一下与之匹配的私钥生成如何：")]),t._v("\ngpg --list-secret-keys\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 然后就可以使用gpg加密你的tag了")]),t._v("\n")])])]),s("h3",{attrs:{id:"git-patch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-patch"}},[t._v("#")]),t._v(" git patch")]),t._v(" "),s("p",[t._v("git中的patch有两种："),s("br"),t._v("\n一是用git diff生成的标准patch"),s("br"),t._v("\n二是用git format-patch生成的Git专用Patch"),s("br"),t._v("\ngit format-patch生成的patch在文件的前面会有diff的信息，还有提交者，时间等等")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用git diff 生成patch (不建议)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" SHA1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a.patch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先检查patch文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" apply --stat a.patch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查能否应用成功 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" apply --check a.patch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打补丁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" apply a.patch\npatch p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a.patch \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用git format-patch 生成patc 建议）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" format-patch SHA1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a.patch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先检查patch文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" apply --stat a.patch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查能否应用成功 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" apply --check a.patch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打补丁 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git am 必须使用的是用git format-patch 生成的patch文件来打补丁,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 而不能是使用git diff生成的patch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用-s或--signoff选项，可以commit信息中加入Signed-off-by信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" am --signoff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a.patch\n")])])]),s("p",[s("a",{attrs:{href:"http://note.youdao.com/yws/public/redirect/share?id=5f785b0976e591a76c962e0624feec5a&type=false",target:"_blank",rel:"noopener noreferrer"}},[t._v("有道分享"),s("OutboundLink")],1)]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("add 2018-01-17 10:42:13")]),t._v(" "),s("h2",{attrs:{id:"把gitbash的编辑器设置为其他文本编辑器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把gitbash的编辑器设置为其他文本编辑器"}},[t._v("#")]),t._v(" 把gitbash的编辑器设置为其他文本编辑器")]),t._v(" "),s("p",[t._v("git vim在rebase时经常崩溃并报如下错误\ngit rebase vim Caught deadly signal SEGV解决方案：\n设置git的编辑器为notepad++（修改完后需关闭整个notepad++才可继续）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config --global core.editor \\ \"'C:/Program Files (x86)/Notepad++/notepad++.exe'”\n")])])]),s("h2",{attrs:{id:"查看本地rebase之前的提交记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看本地rebase之前的提交记录"}},[t._v("#")]),t._v(" 查看本地rebase之前的提交记录")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("//只在rebase的机器上能看到记录，从仓库拉下来的没有记录\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n")])])]),s("hr"),t._v(" "),s("p",[t._v("add 2018-02-09 15:12:25")]),t._v(" "),s("h2",{attrs:{id:"如何查看某次提交修改的文件有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何查看某次提交修改的文件有哪些"}},[t._v("#")]),t._v(" 如何查看某次提交修改的文件有哪些")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看从sha1开始最近 n次的提交改动了那些文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每个文件加了几行减了几行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git log sha1 --stat -n")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log 0a79d5f811403766e05a9ca906a463de5e85c957 --stat -1\n")])])]),s("h2",{attrs:{id:"以图表格式显示提交记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以图表格式显示提交记录"}},[t._v("#")]),t._v(" 以图表格式显示提交记录")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#以图表方式查看各分支之间的关系")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --oneline\n")])])]),s("h2",{attrs:{id:"比对最近几次已经commit代码改动内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比对最近几次已经commit代码改动内容"}},[t._v("#")]),t._v(" 比对最近几次已经commit代码改动内容")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 想查看几次就在head后面该为几")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" head~1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看两次之间改动内容 也可以用sha1值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" head~1 head~3\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);